on:
  push:
  pull_request:

name: build lean

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: install elan
      run: |
        set -o pipefail
        curl -sSfL https://github.com/leanprover/elan/releases/download/v3.1.1/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
        ./elan-init -y --default-toolchain none
        echo "$HOME/.elan/bin" >> $GITHUB_PATH

    - uses: actions/checkout@v3
    - name: Set up olean cache
      uses: actions/cache@v3
      with:
        path: ~/.cache
        key: oleans

    - name: Configure
      working-directory: lean4
      run: |
        lake exe cache get

    - name: Build
      working-directory: lean4
      run: |
        lake build

    - name: Save olean cache
      working-directory: lean4
      run: |
        lake exe cache pack

    - name: Validate docstrings
      working-directory: lean4
      run: |
        lake exe check_docstrings

    - name: Build problems with sorries
      working-directory: lean4
      run: |
        lake build putnam_competition_sorries > original_build.log

    - name: Save olean cache
      working-directory: lean4
      run: |
        lake exe cache pack

    - name: Insert solutions
      run: |
        python lean4/scripts/insert_solutions.py

    - name: Build User submitted problems
      working-directory: lean4
      # Ignore the return code because we want to score the solutions even if the build fails
      # Assuming someone submitted a solution which is not correct
      run: |
        lake build putnam_competition_solution > solution_build.log || true
      
    - name: Score User submitted problems
      run: |
        python lean4/scripts/score_solutions.py
